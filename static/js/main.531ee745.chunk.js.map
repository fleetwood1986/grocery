{"version":3,"sources":["comp/Input.js","comp/Task.js","App.js","reportWebVitals.js","index.js"],"names":["Input","add","name","onChangeThing","onSubmit","type","placeholder","value","onChange","e","Task","id","title","setList","list","completed","className","onClick","map","item","check","filter","App","useState","setName","localStorage","getItem","JSON","parse","useEffect","setItem","stringify","preventDefault","newItem","Date","getTime","toString","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAkBeA,EAhBD,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,cAC3B,OACC,8BACC,uBAAMC,SAAUH,EAAhB,UACC,uBACCI,KAAK,OACLC,YAAY,WACZC,MAAOL,EACPM,SAAU,SAACC,GAAD,OAAON,EAAcM,MAEhC,wBAAQJ,KAAK,SAAb,qB,cCqBWK,EA9BF,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,GAAIC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAYzC,OACC,sBAAcC,UAAS,eAAUD,EAAY,MAAQ,IAArD,UACC,8BACC,6BAAKH,MAGN,gCACC,wBAAQK,QAAS,kBAlBN,SAACN,GACdE,EACCC,EAAKI,KAAI,SAACC,GACT,OAAIA,EAAKR,KAAOA,EACR,2BAAKQ,GAAZ,IAAkBJ,WAAYI,EAAKJ,YAE7BI,MAYgBC,CAAMT,IAAKK,UAAU,MAA5C,SACC,cAAC,IAAD,MAED,wBAAQC,QAAS,kBAAMJ,EAAQC,EAAKO,QAAO,SAACF,GAAD,OAAUA,EAAKR,KAAOA,OAAjE,SACC,cAAC,IAAD,WAVOA,IC4CGW,MAvDf,WACC,IADc,EAUUC,mBAAS,IAVnB,mBAUPrB,EAVO,KAUDsB,EAVC,OAWUD,mBATXE,aAAaC,QAAQ,QAEzBC,KAAKC,MAAMH,aAAaC,QAAQ,SAEhC,IANK,mBAWPZ,EAXO,KAWDD,EAXC,KAiCd,OAHAgB,qBAAU,WACTJ,aAAaK,QAAQ,OAAQH,KAAKI,UAAUjB,MAC1C,CAACA,IAEH,sBAAKE,UAAU,OAAf,UACC,6CACA,cAAC,EAAD,CAAOd,KAAMA,EAAMD,IAvBT,SAACQ,GAEZ,GADAA,EAAEuB,kBACG9B,EACJ,OAAO,KAEP,IAAM+B,EAAU,CACftB,IAAI,IAAIuB,MAAOC,UAAUC,WACzBxB,MAAOV,EACPa,WAAW,GAEZF,EAAQ,CAACoB,GAAF,mBAAcnB,KACrBU,EAAQ,KAYqBrB,cATT,SAACM,GACtBe,EAAQf,EAAE4B,OAAO9B,UAUfO,EAAKI,KAAI,SAACC,GAAU,IACZR,EAAyBQ,EAAzBR,GAAIC,EAAqBO,EAArBP,MAAOG,EAAcI,EAAdJ,UAEnB,OACC,cAAC,EAAD,CACCD,KAAMA,EACND,QAASA,EACTD,MAAOA,EACPD,GAAIA,EACJI,UAAWA,WCxCFuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBb,M","file":"static/js/main.531ee745.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Input = ({ add, name, onChangeThing }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<form onSubmit={add}>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tplaceholder=\"e.g Eggs\"\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange={(e) => onChangeThing(e)}\r\n\t\t\t\t/>\r\n\t\t\t\t<button type=\"submit\">+</button>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport { AiOutlineCheck, AiFillDelete } from 'react-icons/ai';\r\n\r\nconst Task = ({ id, title, setList, list, completed }) => {\r\n\tconst check = (id) => {\r\n\t\tsetList(\r\n\t\t\tlist.map((item) => {\r\n\t\t\t\tif (item.id === id) {\r\n\t\t\t\t\treturn { ...item, completed: !item.completed };\r\n\t\t\t\t}\r\n\t\t\t\treturn item;\r\n\t\t\t})\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div key={id} className={`task ${completed ? 'red' : ''}`}>\r\n\t\t\t<div>\r\n\t\t\t\t<h3>{title}</h3>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={() => check(id)} className=\"btn\">\r\n\t\t\t\t\t<AiOutlineCheck />\r\n\t\t\t\t</button>\r\n\t\t\t\t<button onClick={() => setList(list.filter((item) => item.id !== id))}>\r\n\t\t\t\t\t<AiFillDelete />\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Task;\r\n","import React, { useState, useEffect } from 'react';\nimport './app.css';\nimport Input from './comp/Input';\nimport Task from './comp/Task';\n\nfunction App() {\n\tlet getLocalStorage = () => {\n\t\tlet listt = localStorage.getItem('list');\n\t\tif (listt) {\n\t\t\treturn JSON.parse(localStorage.getItem('list'));\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t};\n\n\tconst [name, setName] = useState('');\n\tconst [list, setList] = useState(getLocalStorage());\n\n\tconst add = (e) => {\n\t\te.preventDefault();\n\t\tif (!name) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tconst newItem = {\n\t\t\t\tid: new Date().getTime().toString(),\n\t\t\t\ttitle: name,\n\t\t\t\tcompleted: false,\n\t\t\t};\n\t\t\tsetList([newItem, ...list]);\n\t\t\tsetName('');\n\t\t}\n\t};\n\tconst onChangeThing = (e) => {\n\t\tsetName(e.target.value);\n\t};\n\tuseEffect(() => {\n\t\tlocalStorage.setItem('list', JSON.stringify(list));\n\t}, [list]);\n\treturn (\n\t\t<div className=\"main\">\n\t\t\t<h1>Grocery Bud</h1>\n\t\t\t<Input name={name} add={add} onChangeThing={onChangeThing} />\n\n\t\t\t{list.map((item) => {\n\t\t\t\tconst { id, title, completed } = item;\n\n\t\t\t\treturn (\n\t\t\t\t\t<Task\n\t\t\t\t\t\tlist={list}\n\t\t\t\t\t\tsetList={setList}\n\t\t\t\t\t\ttitle={title}\n\t\t\t\t\t\tid={id}\n\t\t\t\t\t\tcompleted={completed}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}